--- if.c	2012-08-10 08:33:26.000000000 +0800
+++ if.c89.c	2012-08-10 08:38:07.000000000 +0800
@@ -116,6 +116,7 @@
 			continue;
 		}
 
+		{
 /* interface index */
 		const unsigned int idx = NULL == ifa->ifa_addr ? 0 : pgm_if_nametoindex (ifa->ifa_addr->sa_family, ifa->ifa_name);
 
@@ -145,7 +146,9 @@
 		}
 		pgm_info (_("%s: index=%u flags=%u<%s>"),
 			ifa->ifa_name ? ifa->ifa_name : "(null)", idx, ifa->ifa_flags, flags);
+		}
 
+		{
 		char addr[INET6_ADDRSTRLEN];
 		getnameinfo (ifa->ifa_addr, pgm_sockaddr_len (ifa->ifa_addr),
 			     addr, sizeof (addr),
@@ -167,6 +170,7 @@
 				addr,
 				netmask);
 		}
+		}
 	}
 
 	pgm_freeifaddrs (ifap);
@@ -214,14 +218,17 @@
 	pgm_assert (NULL != netmask);
 
 #ifdef IF_DEBUG
-	const struct in_addr taddr    = { .s_addr = htonl (addr->s_addr) };
-	const struct in_addr tnetaddr = { .s_addr = htonl (netaddr->s_addr) };
-	const struct in_addr tnetmask = { .s_addr = htonl (netmask->s_addr) };
+	{
 	char saddr[INET_ADDRSTRLEN], snetaddr[INET_ADDRSTRLEN], snetmask[INET_ADDRSTRLEN];
+	struct in_addr taddr, tnetaddr, tnetmask;
+	taddr.s_addr	= htonl (addr->s_addr);
+	tnetaddr.s_addr	= htonl (netaddr->s_addr);
+	tnetmask.s_addr	= htonl (netmask->s_addr);
 	pgm_debug ("is_in_net (addr:%s netaddr:%s netmask:%s)",
 		 pgm_inet_ntop (AF_INET, &taddr,    saddr,    sizeof(saddr)),
 		 pgm_inet_ntop (AF_INET, &tnetaddr, snetaddr, sizeof(snetaddr)),
 		 pgm_inet_ntop (AF_INET, &tnetmask, snetmask, sizeof(snetmask)));
+	}
 #endif
 
 	if ((addr->s_addr & netmask->s_addr) == (netaddr->s_addr & netmask->s_addr))
@@ -242,16 +249,21 @@
 	pgm_assert (NULL != netmask);
 
 #ifdef IF_DEBUG
+	{
 	char saddr[INET6_ADDRSTRLEN], snetaddr[INET6_ADDRSTRLEN], snetmask[INET6_ADDRSTRLEN];
 	pgm_debug ("is_in_net6 (addr:%s netaddr:%s netmask:%s)",
 		 pgm_inet_ntop (AF_INET6, addr, saddr, sizeof(saddr)),
 		 pgm_inet_ntop (AF_INET6, netaddr, snetaddr, sizeof(snetaddr)),
 		 pgm_inet_ntop (AF_INET6, netmask, snetmask, sizeof(snetmask)));
+	}
 #endif
 
-	for (unsigned i = 0; i < 16; i++)
+	{
+	unsigned i;
+	for (i = 0; i < 16; i++)
 		if ((addr->s6_addr[i] & netmask->s6_addr[i]) != (netaddr->s6_addr[i] & netmask->s6_addr[i]))
 			return FALSE;
+	}
 	return TRUE;
 }
 
@@ -329,8 +341,11 @@
 	if (AF_INET6 != family && 0 == pgm_inet_network (ifname, &in_addr))
 	{
 #ifdef IF_DEBUG
-		struct in_addr t = { .s_addr = htonl (in_addr.s_addr) };
+		{
+		struct in_addr t;
+		t.s_addr = htonl (in_addr.s_addr);
 		pgm_debug ("IPv4 network address: %s", inet_ntoa (t));
+		}
 #endif
 		if (IN_MULTICAST(in_addr.s_addr)) {
 			pgm_set_error (error,
@@ -341,11 +356,13 @@
 			return FALSE;
 		}
 /* promote to sockaddr and avoid type punning */
+		{
 		struct sockaddr_in s4;
 		memset (&s4, 0, sizeof(s4));
 		s4.sin_family = AF_INET;
 		s4.sin_addr.s_addr = htonl (in_addr.s_addr);
 		memcpy (addr, &s4, sizeof(s4));
+		}
 
 		check_inet_network = TRUE;
 		check_addr = TRUE;
@@ -373,12 +390,13 @@
 	if (!check_addr)
 	{
 		char errbuf[1024];
-		struct addrinfo hints = {
-			.ai_family	= family,
-			.ai_socktype	= SOCK_STREAM,				/* not really, SOCK_RAW */
-			.ai_protocol	= IPPROTO_TCP,				/* not really, IPPROTO_PGM */
-			.ai_flags	= AI_ADDRCONFIG | AI_NUMERICHOST	/* AI_V4MAPPED is unhelpful */
-		}, *res;
+		struct addrinfo hints, *res;
+		memset (&hints, 0, sizeof(hints));
+		hints.ai_family		= family;
+		hints.ai_socktype	= SOCK_STREAM;				/* not really, SOCK_RAW */
+		hints.ai_protocol	= IPPROTO_TCP;				/* not really, IPPROTO_PGM */
+		hints.ai_flags		= AI_ADDRCONFIG | AI_NUMERICHOST;	/* AI_V4MAPPED is unhelpful */
+		{
 		const int eai = getaddrinfo (ifname, NULL, &hints, &res);
 		switch (eai) {
 		case 0:
@@ -425,6 +443,7 @@
 				     eai);
 			return FALSE;
 		}
+		}
 	}
 
 /* Network name into network address, can be expensive with NSS network lookup.
@@ -494,7 +513,7 @@
 				check_inet6_network = TRUE;
 				check_addr = TRUE;
 				break;
-#endif /* HAVE_GETNETENT */
+#endif
 			}
 			default:
 				pgm_set_error (error,
@@ -511,12 +530,13 @@
 	if (!check_addr)
 	{
 		char errbuf[1024];
-		struct addrinfo hints = {
-			.ai_family	= family,
-			.ai_socktype	= SOCK_STREAM,		/* not really, SOCK_RAW */
-			.ai_protocol	= IPPROTO_TCP,		/* not really, IPPROTO_PGM */
-			.ai_flags	= AI_ADDRCONFIG,	/* AI_V4MAPPED is unhelpful */
-		}, *result, *res;
+		struct addrinfo hints, *result, *res;
+		memset (&hints, 0, sizeof(hints));
+		hints.ai_family		= family;
+		hints.ai_socktype	= SOCK_STREAM;		/* not really, SOCK_RAW */
+		hints.ai_protocol	= IPPROTO_TCP;		/* not really, IPPROTO_PGM */
+		hints.ai_flags		= AI_ADDRCONFIG;	/* AI_V4MAPPED is unhelpful */
+		{
 		const int eai = getaddrinfo (ifname, NULL, &hints, &result);
 		switch (eai) {
 		case 0:
@@ -622,6 +642,7 @@
 				     eai);
 			return FALSE;
 		}
+		}
 	}
 
 /* iterate through interface list and match device name, ip or net address */
@@ -654,6 +675,7 @@
 			continue;
 		}
 
+		{
 		const unsigned ifindex = pgm_if_nametoindex (ifa->ifa_addr->sa_family, ifa->ifa_name);
 /* Some faulty systems may fail, handle this situation without raising an assertion. */
 		const bool has_valid_if_name = (ifindex > 0);
@@ -661,7 +683,8 @@
 /* check numeric host */
 		if (check_addr)
 		{
-			for (unsigned i = 0; i < addr_cnt; i++)
+			unsigned i;
+			for (i = 0; i < addr_cnt; i++)
 			{
 				if (0 == pgm_sockaddr_cmp (ifa->ifa_addr, (const struct sockaddr*)&addr[i]))
 				{
@@ -685,9 +708,9 @@
 		if (check_inet_network &&
 		    AF_INET == ifa->ifa_addr->sa_family)
 		{
-			const struct in_addr ifaddr  = { .s_addr = ntohl (((struct sockaddr_in*)ifa->ifa_addr)->sin_addr.s_addr) };
-			const struct in_addr netmask = { .s_addr = ntohl (((struct sockaddr_in*)ifa->ifa_netmask)->sin_addr.s_addr) };
-			struct in_addr lna;
+			struct in_addr ifaddr, netmask, lna;
+			ifaddr.s_addr = ntohl (((struct sockaddr_in*)ifa->ifa_addr)->sin_addr.s_addr);
+			netmask.s_addr = ntohl (((struct sockaddr_in*)ifa->ifa_netmask)->sin_addr.s_addr);
 
 /* local network address must be null, otherwise should match an address is previous check */
 			if (!pgm_inet_lnaof (&lna, &in_addr, &netmask) &&
@@ -803,6 +826,7 @@
 			memcpy (&ir->ir_addr, ifa->ifa_addr, pgm_sockaddr_len (ifa->ifa_addr));
 			continue;
 		}
+		}
 	}
 
 	if (0 == interface_matches) {
@@ -898,6 +922,7 @@
 	}
 
 /* NSS network */
+	{
 	const struct pgm_netent_t* ne = pgm_getnetbyname (group);
 /* ne::n_net in host byte order */
 	if (ne) {
@@ -965,15 +990,17 @@
 			return FALSE;
 		}
 	}
+	}
 
 /* lookup group through name service */
-	struct addrinfo hints = {
-		.ai_family	= family,
-		.ai_socktype	= SOCK_STREAM,		/* not really, SOCK_RAW */
-		.ai_protocol	= IPPROTO_TCP,		/* not really, IPPROTO_PGM */
-		.ai_flags	= AI_ADDRCONFIG,	/* AI_V4MAPPED is unhelpful */
-	}, *result, *res;
-
+	{
+	struct addrinfo hints, *result, *res;
+	memset (&hints, 0, sizeof(hints));
+	hints.ai_family		= family;
+	hints.ai_socktype	= SOCK_STREAM;		/* not really, SOCK_RAW */
+	hints.ai_protocol	= IPPROTO_TCP;		/* not really, IPPROTO_PGM */
+	hints.ai_flags		= AI_ADDRCONFIG;	/* AI_V4MAPPED is unhelpful */
+	{
 	const int eai = getaddrinfo (group, NULL, &hints, &result);
 	if (0 != eai) {
 		char errbuf[1024];
@@ -1008,6 +1035,8 @@
 		     group ? "\"" : "", group ? group : "(null)", group ? "\"" : "");
 	freeaddrinfo (result);
 	return FALSE;
+	}
+	}
 }
 
 /* parse an interface entity from a network parameter.
@@ -1060,6 +1089,7 @@
 	}
 
 /* check interface name length limit */
+	{
 	char** tokens = pgm_strsplit (entity, ",", 10);
 	int j = 0;
 	while (tokens && tokens[j])
@@ -1094,6 +1124,7 @@
 
 	pgm_strfreev (tokens);
 	*interface_list = source_list;
+	}
 	return TRUE;
 }
 
@@ -1135,6 +1166,7 @@
 		(const void*)recv_list,
 		(const void*)error);
 
+	{
 	struct group_source_req* recv_gsr;
 	struct interface_req* primary_interface = (struct interface_req*)pgm_memdup ((*interface_list)->data, sizeof(struct interface_req));
 
@@ -1147,6 +1179,7 @@
 		recv_gsr->gsr_group.ss_family = family;
 
 /* track IPv6 scope from any resolved interface */
+		{
 		unsigned scope_id = 0;
 
 /* if using unspec default group check the interface for address family
@@ -1252,11 +1285,13 @@
 		*recv_list = pgm_list_append (*recv_list, recv_gsr);
 		pgm_free (primary_interface);
 		return TRUE;
+		}
 	}
 
 /* parse one or more multicast receive groups.
  */
 
+	{
 	int j = 0;	
 	char** tokens = pgm_strsplit (entity, ",", 10);
 	while (tokens && tokens[j])
@@ -1333,6 +1368,8 @@
 	pgm_strfreev (tokens);
 	pgm_free (primary_interface);
 	return TRUE;
+	}
+	}
 }
 
 static
@@ -1361,6 +1398,7 @@
 		(const void*)send_list,
 		(const void*)error);
 
+	{
 	struct group_source_req* send_gsr;
 	const struct interface_req* primary_interface = (struct interface_req*)(*interface_list)->data;
 
@@ -1415,6 +1453,7 @@
 
 	*send_list = pgm_list_append (*send_list, send_gsr);
 	return TRUE;
+	}
 }
 
 /* parse network parameter
@@ -1547,6 +1586,7 @@
 			}
 
 /* entity from b to p-1 */
+			{
 			char entity[1024];
 			pgm_strncpy_s (entity, sizeof (entity), b, p - b);
 
@@ -1604,6 +1644,7 @@
 
 			b = ++p;
 			continue;
+			}
 		}
 
 		p++;
@@ -1753,6 +1794,7 @@
 
 	if (!network_parse (network, family, &recv_list, &send_list, error))
 		return FALSE;
+	{
 	const size_t recv_list_len = pgm_list_length (recv_list);
 	const size_t send_list_len = pgm_list_length (send_list);
 	ai = pgm_malloc0 (sizeof(struct pgm_addrinfo_t) + 
@@ -1762,6 +1804,7 @@
 	ai->ai_send_addrs_len = (uint32_t)send_list_len;
 	ai->ai_send_addrs = (void*)((char*)ai->ai_recv_addrs + recv_list_len * sizeof(struct group_source_req));
 
+	{
 	size_t i = 0;
 	while (recv_list) {
 		memcpy (&ai->ai_recv_addrs[i++], recv_list->data, sizeof(struct group_source_req));
@@ -1776,6 +1819,8 @@
 	}
 	*res = ai;
 	return TRUE;
+	}
+	}
 }
 
 void
