--- time.c	2011-08-15 10:53:20.000000000 +0800
+++ time.c89.c	2011-10-02 07:37:20.000000000 +0800
@@ -392,6 +392,7 @@
 #elif defined(_WIN32)
 /* core frequency HKLM/Hardware/Description/System/CentralProcessor/0/~Mhz
  */
+		{
 		HKEY hKey;
 		if (ERROR_SUCCESS == RegOpenKeyExA (HKEY_LOCAL_MACHINE,
 					"HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0",
@@ -411,6 +412,7 @@
 				tsc_khz = dwData * 1000;
 				pgm_minor (_("Registry reports central processor frequency %u MHz"),
 					(unsigned)dwData);
+				{
 /* dump processor name for comparison aid of obtained frequency */
 				char szProcessorBrandString[48];
 				dwDataSize = sizeof (szProcessorBrandString);
@@ -423,6 +425,7 @@
 				{
 					pgm_minor (_("Processor Brand String \"%s\""), szProcessorBrandString);
 				}
+				}
 			}
 			else
 			{
@@ -433,6 +436,7 @@
 			}
 			RegCloseKey (hKey);
 		}
+		}
 #elif defined(__APPLE__)
 /* nb: RDTSC is non-functional on Darwin */
 		uint64_t cpufrequency;
@@ -536,6 +540,7 @@
 
 /* update Windows timer resolution to 1ms */
 #ifdef _WIN32
+	{
 	TIMECAPS tc;
 	if (TIMERR_NOERROR == timeGetDevCaps (&tc, sizeof (TIMECAPS)))
 	{
@@ -547,6 +552,7 @@
 	{
 		pgm_warn (_("Unable to determine timer device resolution."));
 	}
+	}
 #endif
 
 	return TRUE;
@@ -936,11 +942,15 @@
 /* HPET counter tick period is in femto-seconds, a value of 0 is not permitted,
  * the value must be <= 0x05f5e100 or 100ns.
  */
+	{
 	const uint32_t hpet_period = *((uint32_t*)(hpet_ptr + HPET_COUNTER_CLK_PERIOD));
 	set_hpet_mul (hpet_period);
+	}
 #if defined( __x86_64__ ) || defined( __amd64 )
+	{
 	const uint32_t hpet_caps = *((uint32_t*)(hpet_ptr + HPET_GENERAL_CAPS_REGISTER));
 	hpet_wrap = hpet_caps & HPET_COUNT_SIZE_CAP ? 0 : (1ULL << 32);
+	}
 #else
 	hpet_wrap = 1ULL << 32;
 #endif
